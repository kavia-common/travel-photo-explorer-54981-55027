{"is_source_file": true, "format": "JavaScript", "description": "This source file defines an API wrapper for frontend communication with a backend server. It includes configuration for the base URL, an HTTP request function with error handling, and specific API functions such as login, fetching user profile, and photo search functionalities.", "external_files": [], "external_methods": ["fetch"], "published": ["api"], "classes": [], "methods": [{"name": "request(path, { method = \"GET\", body, token } = {})", "description": "Performs fetch requests with support for method, body, token, and error handling.", "scope": "", "scopeKind": ""}, {"name": "api.login", "description": "Authenticates a user with email and password."}, {"name": "api.me", "description": "Fetches the current user profile based on the provided token."}, {"name": "api.listMyPhotos", "description": "Retrieves the list of photos belonging to the user, optionally filtered by location."}, {"name": "api.searchMyPhotos", "description": "Searches within the user's photos based on a query."}, {"name": "api.searchUnsplash", "description": "Searches images on Unsplash by query, with pagination options."}, {"name": "listMyPhotos(token, location)", "scope": "api", "scopeKind": "class", "description": "unavailable"}, {"name": "login(email, password)", "scope": "api", "scopeKind": "class", "description": "unavailable"}, {"name": "me(token)", "scope": "api", "scopeKind": "class", "description": "unavailable"}, {"name": "searchMyPhotos(token, q)", "scope": "api", "scopeKind": "class", "description": "unavailable"}, {"name": "searchUnsplash(query, page = 1, perPage = 12)", "scope": "api", "scopeKind": "class", "description": "unavailable"}], "calls": ["fetch", "JSON.stringify", "res.headers.get", "res.json"], "search-terms": ["API_URL", "fetch wrapper", "auth", "photo search", "Unsplash", "session", "environment variables", "axios", "token-based authentication"], "state": 2, "file_id": 13, "knowledge_revision": 46, "git_revision": "63355d6b5b744008e19aa072c9022312263959da", "revision_history": [{"30": ""}, {"46": "63355d6b5b744008e19aa072c9022312263959da"}], "ctags": [{"_type": "tag", "name": "API_URL", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^const API_URL = envUrl || inferredUrl;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Content-Type", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  const headers = { \"Content-Type\": \"application\\/json\" };$/", "language": "JavaScript", "kind": "property", "scope": "request.headers", "scopeKind": "class"}, {"_type": "tag", "name": "api", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^export const api = {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "envUrl", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^const envUrl = (process.env.REACT_APP_BACKEND_URL || \"\").replace(\\/\\\\\\/+$\\/, \"\");$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  const headers = { \"Content-Type\": \"application\\/json\" };$/", "language": "JavaScript", "kind": "class", "scope": "request", "scopeKind": "class"}, {"_type": "tag", "name": "inferredUrl", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^let inferredUrl = \"\";$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "listMyPhotos", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  async listMyPhotos(token, location) {$/", "language": "JavaScript", "kind": "method", "signature": "(token, location)", "scope": "api", "scopeKind": "class"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  async login(email, password) {$/", "language": "JavaScript", "kind": "method", "signature": "(email, password)", "scope": "api", "scopeKind": "class"}, {"_type": "tag", "name": "me", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  async me(token) {$/", "language": "JavaScript", "kind": "method", "signature": "(token)", "scope": "api", "scopeKind": "class"}, {"_type": "tag", "name": "request", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^async function request(path, { method = \"GET\", body, token } = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "(path, { method = \"GET\", body, token } = {})"}, {"_type": "tag", "name": "searchMyPhotos", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  async searchMyPhotos(token, q) {$/", "language": "JavaScript", "kind": "method", "signature": "(token, q)", "scope": "api", "scopeKind": "class"}, {"_type": "tag", "name": "searchUnsplash", "path": "/home/kavia/workspace/code-generation/travel-photo-explorer-54981-55027/travel_photo_frontend/src/api.js", "pattern": "/^  async searchUnsplash(query, page = 1, perPage = 12) {$/", "language": "JavaScript", "kind": "method", "signature": "(query, page = 1, perPage = 12)", "scope": "api", "scopeKind": "class"}], "hash": "78063551375a5a22bf94aac9ba0c8431", "format-version": 4, "code-base-name": "travel_photo_frontend", "filename": "travel_photo_frontend/src/api.js", "fields": [{"name": "const headers = { \"Content-Type\": \"application\\/json\" };", "scope": "request.headers", "scopeKind": "class", "description": "unavailable"}, {"name": "let inferredUrl = \"\";", "scope": "", "scopeKind": "", "description": "unavailable"}]}